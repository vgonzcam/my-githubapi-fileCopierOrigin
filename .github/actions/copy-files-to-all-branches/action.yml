name: 'Copy Files to All Branches'
description: 'Copy files to all branches in target repository'
inputs:
  repository:
    description: 'Target repository in format owner/repo'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  file-list:
    description: 'Path to file containing list of files to copy'
    required: true
    default: 'files-to-be-copied.txt'

runs:
  using: 'composite'
  steps:
    - name: Get All Branches and Prepare
      id: prepare
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "============================================"
        echo "COPY FILES TO ALL BRANCHES - PREPARATION"
        echo "============================================"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        repo="${{ inputs.repository }}"
        file_list_file="${{ inputs.file-list }}"

        echo "Configuration:"
        echo "  Target Repository: $repo"
        echo "  File List: $file_list_file"
        echo ""

        # Validate file list
        echo "[1/3] Validating file list..."
        if [[ ! -f "$file_list_file" ]]; then
          echo "‚ùå ERROR: File list $file_list_file not found"
          exit 1
        fi
        echo "‚úÖ File list found"
        echo ""

        # Display files
        echo "[2/3] Files to be copied to ALL branches:"
        cat "$file_list_file" | while IFS= read -r line; do
          [[ -z "$line" ]] && continue
          echo "  - $line"
        done
        echo ""

        # Get all branches
        echo "[3/3] Fetching all branches from target repository..."
        branches=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/branches?per_page=100" | jq -r '.[].name')

        if [[ -z "$branches" ]]; then
          echo "‚ùå ERROR: Failed to get branches"
          echo "Repository may not exist or token lacks permissions"
          exit 1
        fi

        # Count and display branches
        branch_count=$(echo "$branches" | wc -l)
        echo "‚úÖ Found $branch_count branch(es):"
        echo "$branches" | while IFS= read -r branch; do
          echo "  - $branch"
        done
        echo ""

        # Save branches to file
        echo "$branches" > /tmp/branches.txt
        
        # Convert file list to JSON
        echo "============================================"
        echo "Converting file list to JSON..."
        echo "============================================"
        
        files_json="[]"
        file_counter=0
        
        while IFS= read -r file; do
          [[ -z "$file" ]] && continue
          
          file_counter=$((file_counter + 1))
          src="${file%%:*}"
          tgt="${file#*:}"
          
          echo "[$file_counter] $src -> $tgt"
          
          if [[ -z "$src" || -z "$tgt" ]]; then
            echo "  ‚ùå Invalid format"
            continue
          fi
          
          if [[ ! -f "$src" ]]; then
            echo "  ‚ùå Source not found"
            continue
          fi
          
          file_size=$(wc -c < "$src")
          echo "  ‚úÖ Ready (${file_size} bytes)"
          
          files_json=$(echo "$files_json" | jq \
            --arg source "$src" \
            --arg target "$tgt" \
            '. + [{"source":$source,"target":$target}]')
        done < "$file_list_file"
        
        echo ""
        echo "Prepared $file_counter file(s) for $branch_count branch(es)"
        echo "Total operations: $((file_counter * branch_count))"
        echo ""
        
        # Save files JSON
        echo "$files_json" > /tmp/files.json
        
        echo "============================================"
        echo "PREPARATION COMPLETED"
        echo "============================================"
        echo ""

    - name: Process Each Branch
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "============================================"
        echo "STARTING BRANCH PROCESSING"
        echo "============================================"
        echo ""
        
        repo="${{ inputs.repository }}"
        files_json=$(cat /tmp/files.json)
        
        branch_number=0
        total_branches=$(wc -l < /tmp/branches.txt)
        successful_branches=0
        failed_branches=0
        
        while IFS= read -r branch; do
          branch_number=$((branch_number + 1))
          
          echo ""
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚ïë BRANCH $branch_number/$total_branches: $branch"
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "Started: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""

          # Get branch SHA
          echo "  [1/6] Getting branch SHA..."
          branch_sha=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$repo/git/ref/heads/$branch" | jq -r '.object.sha')

          if [[ -z "$branch_sha" || "$branch_sha" == "null" ]]; then
            echo "  ‚ùå Failed to get branch SHA"
            failed_branches=$((failed_branches + 1))
            continue
          fi
          echo "  ‚úÖ SHA: $branch_sha"

          # Get branch tree
          echo "  [2/6] Getting branch tree..."
          branch_tree_sha=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$repo/git/commits/$branch_sha" | jq -r '.tree.sha')

          if [[ -z "$branch_tree_sha" || "$branch_tree_sha" == "null" ]]; then
            echo "  ‚ùå Failed to get tree SHA"
            failed_branches=$((failed_branches + 1))
            continue
          fi
          echo "  ‚úÖ Tree SHA: $branch_tree_sha"

          # Create blobs
          echo "  [3/6] Creating blobs for files..."
          tree_entries="[]"
          file_index=0
          file_count=$(echo "$files_json" | jq 'length')
          
          for ((i=0; i<file_count; i++)); do
            file_obj=$(echo "$files_json" | jq -c ".[$i]")
            src=$(echo "$file_obj" | jq -r '.source')
            tgt=$(echo "$file_obj" | jq -r '.target')
            file_index=$((file_index + 1))
            
            echo "    [$file_index/$file_count] $src -> $tgt"
            
            if [[ -z "$src" || -z "$tgt" || "$src" == "null" || "$tgt" == "null" ]]; then
              echo "      ‚ö†Ô∏è  Skipped: Invalid format"
              continue
            fi
            
            if [[ ! -f "$src" ]]; then
              echo "      ‚ö†Ô∏è  Skipped: File not found"
              continue
            fi
            
            file_content=$(base64 -w 0 "$src")
            content_size=$(echo "$file_content" | wc -c)
            echo "      üì¶ Encoded: $content_size chars"
            
            blob_response=$(curl -sf -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"content\":\"$file_content\",\"encoding\":\"base64\"}" \
              "https://api.github.com/repos/$repo/git/blobs")
            
            blob_sha=$(echo "$blob_response" | jq -r '.sha')
            
            if [[ -z "$blob_sha" || "$blob_sha" == "null" ]]; then
              echo "      ‚ùå Failed to create blob"
              continue
            fi
            
            echo "      ‚úÖ Blob: $blob_sha"
            
            tree_entries=$(echo "$tree_entries" | jq \
              --arg path "$tgt" \
              --arg sha "$blob_sha" \
              '. + [{"path":$path,"mode":"100644","type":"blob","sha":$sha}]')
          done

          entries_count=$(echo "$tree_entries" | jq 'length')
          echo "  ‚úÖ Created $entries_count blob(s)"

          # Create tree
          echo "  [4/6] Creating tree..."
          tree_response=$(curl -sf -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"base_tree\":\"$branch_tree_sha\",\"tree\":$tree_entries}" \
            "https://api.github.com/repos/$repo/git/trees")
          
          new_tree_sha=$(echo "$tree_response" | jq -r '.sha')
          
          if [[ -z "$new_tree_sha" || "$new_tree_sha" == "null" ]]; then
            echo "  ‚ùå Failed to create tree"
            failed_branches=$((failed_branches + 1))
            continue
          fi
          echo "  ‚úÖ Tree SHA: $new_tree_sha"

          # Create commit
          echo "  [5/6] Creating commit..."
          commit_message="Add files from workflow repository to branch $branch"
          commit_response=$(curl -sf -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"message\":\"$commit_message\",\"tree\":\"$new_tree_sha\",\"parents\":[\"$branch_sha\"]}" \
            "https://api.github.com/repos/$repo/git/commits")
          
          new_commit_sha=$(echo "$commit_response" | jq -r '.sha')
          
          if [[ -z "$new_commit_sha" || "$new_commit_sha" == "null" ]]; then
            echo "  ‚ùå Failed to create commit"
            failed_branches=$((failed_branches + 1))
            continue
          fi
          echo "  ‚úÖ Commit SHA: $new_commit_sha"

          # Update branch
          echo "  [6/6] Updating branch reference..."
          update_response=$(curl -sf -X PATCH -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"sha\":\"$new_commit_sha\"}" \
            "https://api.github.com/repos/$repo/git/refs/heads/$branch")
          
          if [[ $? -eq 0 ]]; then
            echo "  ‚úÖ Branch updated successfully"
            successful_branches=$((successful_branches + 1))
            echo ""
            echo "  ‚úÖ BRANCH $branch COMPLETED SUCCESSFULLY"
          else
            echo "  ‚ùå Failed to update branch"
            failed_branches=$((failed_branches + 1))
            echo ""
            echo "  ‚ùå BRANCH $branch FAILED"
          fi
          
          echo "  Finished: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        done < /tmp/branches.txt
        
        echo ""
        echo "============================================"
        echo "FINAL SUMMARY"
        echo "============================================"
        echo "Total branches processed: $total_branches"
        echo "‚úÖ Successful: $successful_branches"
        echo "‚ùå Failed: $failed_branches"
        echo ""
        
        if [[ $failed_branches -gt 0 ]]; then
          echo "‚ö†Ô∏è  Some branches failed. Check logs above for details."
          exit 1
        else
          echo "‚úÖ ALL BRANCHES COMPLETED SUCCESSFULLY"
        fi
        echo "============================================"
