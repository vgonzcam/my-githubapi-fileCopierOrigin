name: 'Copy Files to Target Repository'
description: 'Copy files to the default branch of target repository'
inputs:
  repository:
    description: 'Target repository in format owner/repo'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  file-list:
    description: 'Path to file containing list of files to copy'
    required: true
    default: 'files-to-be-copied.txt'

runs:
  using: 'composite'
  steps:
    - name: Prepare File List and Get Branch Info
      id: prepare
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "============================================"
        echo "COPY FILES TO TARGET - PREPARATION PHASE"
        echo "============================================"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        repo="${{ inputs.repository }}"
        file_list_file="${{ inputs.file-list }}"
        
        echo "Configuration:"
        echo "  Target Repository: $repo"
        echo "  File List: $file_list_file"
        echo ""

        # Validate file list exists
        echo "[1/5] Validating file list..."
        if [[ ! -f "$file_list_file" ]]; then
          echo "❌ ERROR: File list $file_list_file not found in current repository"
          exit 1
        fi
        echo "✅ File list found"
        echo ""

        # Display files to be copied
        echo "[2/5] Files to be copied:"
        cat "$file_list_file" | while IFS= read -r line; do
          [[ -z "$line" ]] && continue
          echo "  - $line"
        done
        echo ""

        # Get default branch
        echo "[3/5] Getting default branch name for target repository..."
        default_branch=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo" | jq -r '.default_branch')

        if [[ -z "$default_branch" || "$default_branch" == "null" ]]; then
          echo "❌ ERROR: Failed to get default branch name"
          echo "Repository may not exist or token lacks permissions"
          exit 1
        fi

        echo "✅ Default branch: $default_branch"
        echo "branch_name=$default_branch" >> $GITHUB_OUTPUT
        echo ""

        # Get branch SHA
        echo "[4/5] Getting branch SHA for: $default_branch"
        branch_sha=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/git/ref/heads/$default_branch" | \
          jq -r '.object.sha')

        if [[ -z "$branch_sha" || "$branch_sha" == "null" ]]; then
          echo "❌ ERROR: Failed to get branch SHA"
          exit 1
        fi

        echo "✅ Branch SHA: $branch_sha"
        echo "branch_sha=$branch_sha" >> $GITHUB_OUTPUT
        echo ""

        # Get branch tree
        echo "[5/5] Getting branch tree SHA..."
        branch_tree_sha=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/git/commits/$branch_sha" | \
          jq -r '.tree.sha')

        if [[ -z "$branch_tree_sha" || "$branch_tree_sha" == "null" ]]; then
          echo "❌ ERROR: Failed to get branch tree SHA"
          exit 1
        fi

        echo "✅ Branch tree SHA: $branch_tree_sha"
        echo "branch_tree_sha=$branch_tree_sha" >> $GITHUB_OUTPUT
        echo ""

        # Convert file list to JSON
        echo "============================================"
        echo "Converting file list to JSON format..."
        echo "============================================"
        
        files_json="[]"
        file_counter=0
        
        while IFS= read -r file; do
          # Skip empty lines
          [[ -z "$file" ]] && continue
          
          file_counter=$((file_counter + 1))
          
          # Parse source and target
          src="${file%%:*}"
          tgt="${file#*:}"
          
          echo "[$file_counter] Processing: $src -> $tgt"
          
          if [[ -z "$src" || -z "$tgt" ]]; then
            echo "  ❌ Invalid file pair format"
            exit 1
          fi
          
          # Check if source file exists
          if [[ ! -f "$src" ]]; then
            echo "  ❌ Source file not found: $src"
            exit 1
          fi
          
          file_size=$(wc -c < "$src")
          echo "  ✅ Source file exists (${file_size} bytes)"
          
          files_json=$(echo "$files_json" | jq \
            --arg source "$src" \
            --arg target "$tgt" \
            '. + [{"source":$source,"target":$target}]')
        done < "$file_list_file"
        
        echo ""
        echo "Summary: $file_counter file(s) prepared for copying"
        echo ""
        
        echo "files_json<<EOF" >> $GITHUB_OUTPUT
        echo "$files_json" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "============================================"
        echo "PREPARATION PHASE COMPLETED SUCCESSFULLY"
        echo "============================================"
        echo ""

    - name: Create and Push Commit
      uses: ./.github/actions/create-commit
      with:
        repository: ${{ inputs.repository }}
        github-token: ${{ inputs.github-token }}
        branch-name: ${{ steps.prepare.outputs.branch_name }}
        branch-sha: ${{ steps.prepare.outputs.branch_sha }}
        branch-tree-sha: ${{ steps.prepare.outputs.branch_tree_sha }}
        files-json: ${{ steps.prepare.outputs.files_json }}
        commit-message: 'Add files from workflow repository'

    - name: Report Success
      shell: bash
      run: |
        echo ""
        echo "============================================"
        echo "✅ COPY TO TARGET COMPLETED SUCCESSFULLY"
        echo "============================================"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "Target Repository: ${{ inputs.repository }}"
        echo "Target Branch: ${{ steps.prepare.outputs.branch_name }}"
        echo ""
        echo "Files copied:"
        cat "${{ inputs.file-list }}" | while IFS= read -r line; do
          [[ -z "$line" ]] && continue
          echo "  ✅ $line"
        done
        echo ""
        echo "============================================"
